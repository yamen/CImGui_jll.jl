# Autogenerated wrapper script for CImGui_jll for x86_64-w64-mingw32
export compile_commands, libcimgui, libcimgui_helper, libimgui

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "PATH"
LIBPATH_default = ""

# Relative path to `compile_commands`
const compile_commands_splitpath = ["share", "compile_commands.json"]

# This will be filled out by __init__() for all products, as it must be done at runtime
compile_commands_path = ""

# compile_commands-specific global declaration
# This will be filled out by __init__()
compile_commands = ""


# Relative path to `libcimgui`
const libcimgui_splitpath = ["bin", "libcimgui.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcimgui_path = ""

# libcimgui-specific global declaration
# This will be filled out by __init__()
libcimgui_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcimgui = "libcimgui.dll"


# Relative path to `libcimgui_helper`
const libcimgui_helper_splitpath = ["bin", "libcimgui_helper.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcimgui_helper_path = ""

# libcimgui_helper-specific global declaration
# This will be filled out by __init__()
libcimgui_helper_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcimgui_helper = "libcimgui_helper.dll"


# Relative path to `libimgui`
const libimgui_splitpath = ["bin", "libimgui-cpp.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libimgui_path = ""

# libimgui-specific global declaration
# This will be filled out by __init__()
libimgui_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libimgui = "libimgui-cpp.dll"


# Inform that the wrapper is available for this platform
wrapper_available = true

"""
Open all libraries
"""
function __init__()
    # This either calls `@artifact_str()`, or returns a constant string if we're overridden.
    global artifact_dir = find_artifact_dir()

    global PATH_list, LIBPATH_list
    global compile_commands_path = normpath(joinpath(artifact_dir, compile_commands_splitpath...))

    global compile_commands = compile_commands_path
    global libcimgui_path = normpath(joinpath(artifact_dir, libcimgui_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcimgui_handle = dlopen(libcimgui_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libcimgui_path))

    global libcimgui_helper_path = normpath(joinpath(artifact_dir, libcimgui_helper_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcimgui_helper_handle = dlopen(libcimgui_helper_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libcimgui_helper_path))

    global libimgui_path = normpath(joinpath(artifact_dir, libimgui_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libimgui_handle = dlopen(libimgui_path, RTLD_LAZY | RTLD_DEEPBIND)
    push!(LIBPATH_list, dirname(libimgui_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ';')
    global LIBPATH = join(vcat(LIBPATH_list, [Sys.BINDIR, joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)]), ';')

    
end  # __init__()
